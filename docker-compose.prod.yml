version: "3.8"

services:
  app:
    build: .
    container_name: elearning_frankenphp_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp" # HTTP/3
    volumes:
      - ./:/app
      - caddy_data:/data
      - caddy_config:/config
      - ./storage:/app/storage
      - ./backups:/app/backups
    environment:
      - APP_ENV=production
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=false
      - APP_URL=${APP_URL}
      - DB_CONNECTION=mysql
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_STORE=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - SERVER_NAME=${SERVER_NAME}
      - FRANKENPHP_CONFIG=worker /app/public/index.php
    depends_on:
      - database
      - redis
    networks:
      - elearning-network

  database:
    image: mysql:8.0
    container_name: elearning_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - database_data_prod:/var/lib/mysql
      - ./backups:/backups
    networks:
      - elearning-network
    command: --default-authentication-plugin=mysql_native_password

  redis:
    image: redis:7-alpine
    container_name: elearning_redis_prod
    restart: unless-stopped
    volumes:
      - redis_data_prod:/data
    networks:
      - elearning-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  backup:
    image: mysql:8.0
    container_name: elearning_backup
    restart: "no"
    volumes:
      - ./backups:/backups
      - ./backup.sh:/backup.sh
    environment:
      - MYSQL_HOST=database
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
    depends_on:
      - database
    networks:
      - elearning-network
    command: /backup.sh

volumes:
  database_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  elearning-network:
    driver: bridge
